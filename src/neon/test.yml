doc: Built file to test builds
default:
- builtin_filter
- builtin_find
- builtin_now
- builtin_run
- builtin_throw
- task_cat
- task_chdir
- task_chmod
- task_copy
- task_delete
- task_for
- task_if
- task_link
- task_throw
- task_touch

properties:
  BUILD_DIR: "#{BASE}/../../build"

targets:

  builtin_filter:
    doc: Test the filter builtin function
    steps:
    - mkdir: "#{BUILD_DIR}/filter"
    - touch:
      - "#{BUILD_DIR}/filter/foo.txt"
      - "#{BUILD_DIR}/filter/bar.txt"
    - script: |
        files = toString(filter(find(BUILD_DIR, "filter/**/*.txt"), "filter/**/bar*"))
        if files != "[filter/foo.txt]" {
          throw("ERROR: " + files)
        } else {
          println("Filter test success")
        }

  builtin_find:
    doc: Test the find builtin function
    steps:
    - mkdir: "#{BUILD_DIR}/find/spam"
    - "touch #{BUILD_DIR}/find/foo #{BUILD_DIR}/find/spam/bar"
    - script: |
        files = toString(find(BUILD_DIR+"/find", "**/*"))
        if files != "[foo spam spam/bar]" {
          throw("ERROR: " + files)
        } else {
          println("Find test success")
        }

  builtin_now:
    doc: Test the now builtin function
    steps:
    - script: |
        r = import("regexp")
        n = now()
        match, err = r.MatchString(`\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d`, n)
        if !match || err != nil {
          throw("ERROR now '"+n+"'")
        } else {
          println("Now test success")
        }

  builtin_run:
    doc: Test run builtin function
    steps:
    - script: |
        n = run("date", "--iso-8601")
        match, err = r.MatchString(`\d\d\d\d-\d\d-\d\d`, n)
        if !match || err != nil {
          throw("ERROR run '"+n+"'")
        } else {
          println("Run test success")
        }

  builtin_throw:
    doc: Test the throw builtin function
    steps:
    - try:
      - script: 'throw("TEST")'
      catch:
      - script: |
          if error != "evaluating script: TEST" {
            throw("Throw test failure")
          } else {
            println("Throw test success")
          }

  task_cat:
    doc: Test task cat
    steps:
    - mkdir: "#{BUILD_DIR}/cat"
    - touch: "#{BUILD_DIR}/cat/test.txt"
    - cat: "#{BUILD_DIR}/cat/test.txt"

  task_chdir:
    doc: Test task chdir
    steps:
    - mkdir: "#{BUILD_DIR}"
    - chdir: "#{BUILD_DIR}"
    - script: |
        os = import("os")
        filepath = import("path/filepath")
        dir = os.Getwd()
        buildDir = filepath.Abs(BUILD_DIR)
        if dir != buildDir {
          throw("Chdir test failure")
        } else {
          println("Chdir test success")
        }

  task_chmod:
    doc: Test task chmod
    steps:
    - mkdir: "#{BUILD_DIR}/chmod"
    - touch: "#{BUILD_DIR}/chmod/test.txt"
    - chmod: "test.txt"
      dir: "#{BUILD_DIR}/chmod"
      mode: "0755"

  task_copy:
    doc: Test task copy
    steps:
    - mkdir: "#{BUILD_DIR}/copy/src"
    - mkdir: "#{BUILD_DIR}/copy/dst"
    - touch:
      - "#{BUILD_DIR}/copy/src/foo.txt"
      - "#{BUILD_DIR}/copy/src/bar.txt"
    - copy:    "**/*.txt"
      dir:     "#{BUILD_DIR}/copy/src"
      exclude: "**/bar*"
      todir:   "#{BUILD_DIR}/copy/dst"
    - script: |
        files = toString(find(BUILD_DIR, "copy/dst/*"))
        if files != "[copy/dst/foo.txt]" {
          throw("ERROR: " + files)
        } else {
          println("Copy test success")
        }

  task_delete:
    doc: Test task delete
    steps:
    - mkdir: "#{BUILD_DIR}/delete/foo"
    - touch: "#{BUILD_DIR}/delete/foo/test.txt"
    - delete: "#{BUILD_DIR}/delete/foo"
    - script: |
        os = import("os")
        filepath = import("path/filepath")
        file = filepath.Join(BUILD_DIR, "delete", "foo")
        _, err = os.Stat(file)
        if err == nil {
          throw("Delete test failure")
        } else {
          println("Delete test success")
        }

  task_for:
    doc: Test doc task
    steps:
    - script: 'sum = 0'
    - for: i
      in: [1, 2, 3]
      do:
      - script: 'sum = sum + i'
    - script: |
        if sum != 6 {
          throw("For test failure")
        } else {
          println("For test success")
        }

  task_if:
    doc: If task success
    steps:
    - script: 'failure = true'
    - if: failure
      then:
      - script: 'failure = false'
    - script: |
        if failure {
          throw("If test failure")
        } else {
          println("If test success")
        }

  task_link:
    doc: Test task link
    steps:
    - delete:  "#{BUILD_DIR}/link"
    - mkdir: "#{BUILD_DIR}/link"
    - touch: "#{BUILD_DIR}/link/foo"
    - link: "#{BUILD_DIR}/link/foo"
      to:   "#{BUILD_DIR}/link/bar"
    - script: |
        files = toString(find(BUILD_DIR, "link/*"))
        if files != "[link/bar link/foo]" {
          throw("ERROR: " + files)
        } else {
          println("Link test success")
        }

  task_throw:
    doc: Test task throw
    steps:
    - script: 'error = ""'
    - try:
      - throw: 'This is a test'
      catch:
      - if: 'error == "This is a test"'
        then:
        - print: 'Throw task test success'
        else:
        - throw: "Throw task test failure"

  task_touch:
    doc: Test task touch
    steps:
    - mkdir: "#{BUILD_DIR}/touch"
    - touch: "#{BUILD_DIR}/touch/foo"
    - script: |
        files = toString(find(BUILD_DIR, "touch/*"))
        if files != "[touch/foo]" {
          throw("ERROR: " + files)
        } else {
          println("Touch test success")
        }
